1.- Should we use typed keys?
    -> Is a significant effort, but is it worth it?
       -> Does it really make somebody else's live easier?
          -> Check for use cases where that would be the case
             -> Are these use cases important enough?
       -> The alternative, all keys are string type.
          -> Simple implementation and usage.
          -> But would we be lacking flexibility or power somehow?
             -> Again check use cases.

2.- Should MetadataKey should used as high level entity in API?
    -> So far, API handles only key ids.
    -> For instance, we have content_get(Content *c, gint KeyId)
       -> Should be good/interesting handling MetadataKey directly?
       -> Like content_get(Content *c, MetadataKey *key)

    -> It would require to have an API to get the MetadataKey for artist, album,
       and so on.
    -> But keys would carry with them all information that any one could use.

3.- Grouping plugins
    -> So far, each plugin is exposed to client, with no relation with other
       plugins.
    -> Some libraries can provide more than one instance of same plugin.
	  -> For instance, upnp plugins is shown each per server
    -> The same can happen for future plugins
	  -> For instance, a user could design a by-disk plugin, so each time a
             disk is plugged a new plugin instance is created.
    -> So at the end, UI could be populated with a lot of plugins in its first
       view.
    -> Some multimedia players group the "sources" to improve user experience.
	  -> Some group plugins by "type". That is, all upnp plugins are
             grouped together in their view.
	  -> Some others group plugins by kind of information they manage:
             audio plugins, video plugins or image plugins.
    -> So a proposal would be adding a couple of "tags" to each plugin that
       would help user to implement above grouping approachs.
	  -> One tag could be "type", so all plugins from the same library
	     would share it. For instance, "upnp", "youtube", and so on.
	  -> Other tag would be "content", telling which kind of content is
             able to manage: audio, video or image.
	      -> This could be duplicated, telling a plugin is able to provide
                 several kind of information.

4.- Getting rid of function to notify slow keys
	-> While it is clear what is a "slow" key, reporting about them in a single function can be misunderstood.
	-> A key could be solved either in "fast" or "slow" form, being the latter more accurate. In this case, should the key be reported as fast or as slow?
	-> Also, a key could be fast in a operation while "slow" in another. What to inform in this case?
	-> Proposal is to keep the concept, but removing the function (if possible, as maybe it is a must for the good performance of framework)
	-> Instead, information about slow/fast keys should be in documentation about the appropriate plugin.

